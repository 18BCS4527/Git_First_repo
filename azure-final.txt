
package com.azure.ai.openai.usage;  
  
import com.azure.ai.openai.OpenAIClient;  
import com.azure.ai.openai.OpenAIClientBuilder;  
import com.azure.ai.openai.models.ChatChoice;  
import com.azure.ai.openai.models.ChatCompletions;  
import com.azure.ai.openai.models.ChatCompletionsOptions;  
import com.azure.ai.openai.models.ChatRequestMessage;  
import com.azure.ai.openai.models.ChatRequestUserMessage;  
import com.azure.ai.openai.models.ChatRequestSystemMessage;  
import com.azure.ai.openai.models.ChatRequestAssistantMessage;
import com.azure.ai.openai.models.ChatResponseMessage;  
import com.azure.core.credential.AzureKeyCredential;  
  
import java.util.ArrayList;  
import java.util.List;
import java.util.Optional;  
  
public class Chat {  
    public static void main(String[] args) {  
        // Retrieve endpoint and API key from environment variables  
        String endpoint = Optional.ofNullable(System.getenv("AZURE_OPENAI_ENDPOINT")).orElse("https://chila-m8u5ron6-eastus2.openai.azure.com/");  
        String apiKey = Optional.ofNullable(System.getenv("AZURE_OPENAI_API_KEY")).orElse("YOUR_KEY_VALUE_HERE");  
        String deploymentName = "gpt-4";  
        if (endpoint == null || apiKey == null) {  
            System.err.println("Please set the AZURE_OPENAI_ENDPOINT and AZURE_OPENAI_API_KEY environment variables.");  
            return;  
        }  
  
        // Initialize the OpenAI client with key-based authentication  
        OpenAIClient client = new OpenAIClientBuilder()  
                .endpoint(endpoint)  
                .credential(new AzureKeyCredential(apiKey))  
                .buildClient();  
  
        // Simulate chat interaction  
        List<ChatRequestMessage> prompts = new ArrayList<>();  
          
  
        ChatCompletionsOptions options = new ChatCompletionsOptions(prompts)  
                .setMaxTokens(800)  
                .setTemperature(0.7)  
                .setTopP(0.95)  
                .setFrequencyPenalty((double)0)  
                .setPresencePenalty((double)0)  
                .setStop(null);  
  
        // Print the response
        try {
          ChatCompletions chatCompletions = client.getChatCompletions(deploymentName, options);  
          System.out.println(chatCompletions.toJsonString());
        }  catch (Exception e) {
          System.out.println("Error: " + e.getMessage());
        }  
    }  
}
