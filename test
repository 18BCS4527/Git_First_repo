import { Component, Inject } from '@angular/core';
import { DecimalPipe } from '@angular/common';
import { LOCALE_ID } from '@angular/core';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent {
  formattedNumber: string;
  parsedNumber: number;

  constructor(
    private decimalPipe: DecimalPipe,
    @Inject(LOCALE_ID) private locale: string
  ) {
    // Example usage
    const originalNumber = 123256.98;
    this.formattedNumber = this.formatToPortuguese(originalNumber);
    this.parsedNumber = this.parseFromPortuguese(this.formattedNumber);
  }

  formatToPortuguese(value: string | number): string {
    if (typeof value === 'string') {
      // Remove any commas used as thousand separators
      value = value.replace(/,/g, '');
    }

    const parsedValue = parseFloat(value as string);

    if (isNaN(parsedValue)) {
      return ''; // Return an empty string if the value cannot be parsed to a number
    }

    // Format the parsed number according to the specified locale
    return this.decimalPipe.transform(parsedValue, '1.2-2', this.locale) ?? '';
  }

  parseFromPortuguese(value: string): number {
    if (typeof value !== 'string') {
      return NaN;
    }

    // Replace the Portuguese decimal separator (comma) with a dot
    value = value.replace(/\./g, '').replace(/,/g, '.');

    const parsedValue = parseFloat(value);

    if (isNaN(parsedValue)) {
      return NaN; // Return NaN if the value cannot be parsed to a number
    }

    return parsedValue;
  }
}