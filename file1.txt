const nlp = require('compromise');

// Input sentence
const sentence = "Name is John and Age is 25";

// Load the sentence into Compromise
const doc = nlp(sentence);

// Define a pattern to match "Key is Value" structure
const pattern = "{key} is {value}";

// Find matches based on the pattern
const matches = doc.match(pattern);

// Extract key-value pairs from matches
matches.forEach(match => {
    const key = match.groups().key.out('text');
    const value = match.groups().value.out('text');
    console.log(`Key: ${key}, Value: ${value}`);
});




const nlp = require('compromise');

// Input sentence
const sentence = "The temperature is 25 degrees Celsius.";

// Load the sentence into Compromise
const doc = nlp(sentence);

// Define a general pattern to match key-value pairs
const pattern = "{key} (is|are) {value}";

// Find matches based on the pattern
const matches = doc.match(pattern);

// Extract key-value pairs from matches
matches.forEach(match => {
    const key = match.groups().key.out('text');
    const value = match.groups().value.out('text');
    console.log(`Key: ${key}, Value: ${value}`);
});







const nlp = require('compromise');

// Sample input
const input = "Modify product as PRODUCTABCD and term to 6 months";

// Define multiple patterns for extracting key-value pairs
const patterns = [
  "[verb] [noun] as [word] and [noun] to [word]",
  "[verb] [noun] as [word] and [noun] to [value] [unit]"
  // You can add more patterns here if needed
];

// Array to store key-value pairs
const keyValuePairList = [];

// Iterate through each pattern
patterns.forEach(pattern => {
  const results = nlp(input).match(pattern).out('json');
  
  // Extract key-value pairs from results and add to the list
  results.forEach(result => {
    const key = result.groups.word[0].text.toLowerCase();
    const value = result.groups.word[1].text;
    const unit = result.groups.unit ? result.groups.unit[0].text : '';

    // Only push if the unit is not empty
    if (unit !== '') {
      keyValuePairList.push({ key, value, unit });
    } else {
      // Push without the unit if it's empty
      keyValuePairList.push({ key, value });
    }
  });
});

console.log(keyValuePairList);

